!function(){"use strict";angular.module("angular-contextual-date",[])}();
!function(){"use strict";function t(){var t={scope:{datetime:"=",timezone:"="},restrict:"EA",controller:e,controllerAs:"CDC",template:"<span ng-bind='CDC.cDateFormatted'></span>",bindToController:!0};return t}function e(t){function e(){n.cDateFormatted=t.format(n.datetime,null,n.timezone)}var n=this;n.cDateFormatted="",e()}angular.module("angular-contextual-date").directive("contextualDate",t),t.$inject=[],e.$inject=["contextualDateService"]}();
!function(){"use strict";function t(t){function n(n,e){return t.format(n,null,e)}return n}angular.module("angular-contextual-date").filter("contextualDate",t),t.$inject=["contextualDateService"]}();
!function(){"use strict";function e(e,t){function a(e,t,a){var n=u.parseDate(e);if(isNaN(n))return e;var r,o,s=new Date;if(o=u.formatRelative(n,s),u.config.hideFullDate)return o;r=t?t:u.formatFull(n,s,a);var i=u.config.contextualDateFormat,l=i.replace("%fullDate%",r).replace("%relativeDate%",o);return l}function n(t,a,n){var r=u.parseDate(t);if(isNaN(r))return t;a=a||new Date;var o="",s=u.config.thresholds,i=r.getDate()===a.getDate()&&r.getMonth()===a.getMonth()&&r.getFullYear()===a.getFullYear(),l=new Date(a.getTime());l.setDate(l.getDate()-Math.round(31*s.month));var m=r.getTime()-l.getTime()>=0,d=new Date(a.getTime());d.setDate(d.getDate()-Math.round(365*s.year));var c=r.getTime()-d.getTime()>=0,h=e("date"),g=u.config.fullDateFormats;return o=i?h(r,g.today,n):m?h(r,g.thisMonth,n):c?h(r,g.thisYear,n):h(r,g.historical,n)}function r(e){return Array.prototype.join.call(arguments," ").trim()}function o(){var e,a=u.config.language,n=t[0].documentElement.lang;return a&&(e=u.languages[a]),!e&&n&&(e=u.languages[n]),e||(e=u.languages.en_US),e}function s(e,t){var a=u.parseDate(e);if(isNaN(a))return e;t=t||new Date;var n=o(),s=t.getTime()-a.getTime(),i=s,l=i/1e3,m=l/60,d=m/60,c=d/24,h=c/7,g=c/30,f=c/365,D="",y=u.config.thresholds;return f>=y.years?D=r(Math.round(f),n.years):f>=y.year?D=r(1,n.year):g>=y.months?D=r(Math.round(g),n.months):g>=y.month?D=r(1,n.month):h>=y.weeks?D=r(Math.round(h),n.weeks):h>=y.week?D=r(1,n.week):c>=y.days?D=r(Math.round(c),n.days):c>=y.day?D=r(1,n.day):d>=y.hours?D=r(Math.round(d),n.hours):d>=y.hour?D=r(1,n.hour):m>=y.minutes?D=r(Math.round(m),n.minutes):m>=y.minute?D=r(1,n.minute):l>=y.seconds?D=r(Math.round(l),n.seconds):l>=y.second?D=r(1,n.second):i>=y.milliseconds?D=r(Math.round(i),n.milliseconds):i>=y.millisecond&&(D=r(1,n.millisecond)),D=D?r(n.prefix,D,n.suffix):n.now}function i(e){return e instanceof Date?e:new Date(angular.isNumber(e)?e:/^\d+$/.test(e)?parseInt(e,10):e)}var u={format:a,formatRelative:s,formatFull:n,parseDate:i,config:{hideFullDate:!1,fullDateFormats:{today:"h:mm a",thisMonth:"MMM d 'at' h:mm a",thisYear:"MMM d",historical:"MMM d, y"},contextualDateFormat:"%fullDate% (%relativeDate%)",language:null,thresholds:{years:1.75,year:.75,months:1.75,month:.9,weeks:1.75,week:1,days:2,day:1,hours:2,hour:1,minutes:2,minute:1,seconds:2,second:1,milliseconds:2,millisecond:1}},languages:{en_US:{now:"just now",prefix:"",suffix:"ago",millisecond:"millisecond",milliseconds:"milliseconds",second:"second",seconds:"seconds",minute:"minute",minutes:"minutes",hour:"hour",hours:"hours",day:"day",days:"days",week:"week",weeks:"weeks",month:"month",months:"months",year:"year",years:"years"}}};return u}angular.module("angular-contextual-date").factory("contextualDateService",e),e.$inject=["$filter","$document"]}();
//# sourceMappingURL=data:application/json;base64,