!function(){"use strict";angular.module("angular-contextual-date",[])}();
!function(){"use strict";function t(){var t={scope:{datetime:"=",timezone:"="},restrict:"EA",controller:e,controllerAs:"CDC",template:"<span ng-bind='CDC.cDateFormatted'></span>",bindToController:!0};return t}function e(t){function e(){n.cDateFormatted=t.format(n.datetime,null,n.timezone)}var n=this;n.cDateFormatted="",e()}angular.module("angular-contextual-date").directive("contextualDate",t),t.$inject=[],e.$inject=["contextualDateService"]}();
!function(){"use strict";function t(t){function n(n,e){return t.format(n,null,e)}return n}angular.module("angular-contextual-date").filter("contextualDate",t),t.$inject=["contextualDateService"]}();
!function(){"use strict";function e(e,t){function a(e,t,a){var n=i.parseDate(e);if(isNaN(n))return e;var r,o,s=new Date;if(o=i.formatRelative(n,s),i.config.hideFullDate)return o;r=t?t:i.formatFull(n,s,a);var u=i.config.contextualDateFormat,l=u.replace("%fullDate%",r).replace("%relativeDate%",o);return l}function n(t,a,n){var r=i.parseDate(t);if(isNaN(r))return t;a=a||new Date;var o="",s=i.config.thresholds,u=r.getDate()===a.getDate()&&r.getMonth()===a.getMonth()&&r.getFullYear()===a.getFullYear(),l=new Date(a.getTime());l.setDate(l.getDate()-Math.round(31*s.month));var m=r.getTime()-l.getTime()>=0,d=new Date(a.getTime());d.setDate(d.getDate()-Math.round(365*s.year));var h=r.getTime()-d.getTime()>=0,c=e("date"),g=i.config.fullDateFormats;return o=u?c(r,g.today,n):m?c(r,g.thisMonth,n):h?c(r,g.thisYear,n):c(r,g.historical,n)}function r(e){return Array.prototype.join.call(arguments," ").trim()}function o(e,a){var n=i.parseDate(e);if(isNaN(n))return e;a=a||new Date;var o,s=i.config.language,u=t[0].documentElement.lang;s&&(o=i.languages[s]),!o&&u&&(o=i.languages[u]),o||(o=i.languages.en_US);var l=a.getTime()-n.getTime(),m=l,d=m/1e3,h=d/60,c=h/60,g=c/24,f=g/7,D=g/30,y=g/365,M="",w=i.config.thresholds;return y>=w.years?M=r(Math.round(y),o.years):y>=w.year?M=r(1,o.year):D>=w.months?M=r(Math.round(D),o.months):D>=w.month?M=r(1,o.month):f>=w.weeks?M=r(Math.round(f),o.weeks):f>=w.week?M=r(1,o.week):g>=w.days?M=r(Math.round(g),o.days):g>=w.day?M=r(1,o.day):c>=w.hours?M=r(Math.round(c),o.hours):c>=w.hour?M=r(1,o.hour):h>=w.minutes?M=r(Math.round(h),o.minutes):h>=w.minute?M=r(1,o.minute):d>=w.seconds?M=r(Math.round(d),o.seconds):d>=w.second?M=r(1,o.second):m>=w.milliseconds?M=r(Math.round(m),o.milliseconds):m>=w.millisecond&&(M=r(1,o.millisecond)),M=M?r(o.prefix,M,o.suffix):o.now}function s(e){return e instanceof Date?e:new Date(angular.isNumber(e)?e:/^\d+$/.test(e)?parseInt(e,10):e)}var i={format:a,formatRelative:o,formatFull:n,parseDate:s,config:{hideFullDate:!1,fullDateFormats:{today:"h:mm a",thisMonth:"MMM d 'at' h:mm a",thisYear:"MMM d",historical:"MMM d, y"},contextualDateFormat:"%fullDate% (%relativeDate%)",language:null,thresholds:{years:1.75,year:.75,months:1.75,month:.9,weeks:1.75,week:1,days:2,day:1,hours:2,hour:1,minutes:2,minute:1,seconds:2,second:1,milliseconds:2,millisecond:1}},languages:{en_US:{now:"just now",prefix:"",suffix:"ago",millisecond:"millisecond",milliseconds:"milliseconds",second:"second",seconds:"seconds",minute:"minute",minutes:"minutes",hour:"hour",hours:"hours",day:"day",days:"days",week:"week",weeks:"weeks",month:"month",months:"months",year:"year",years:"years"}}};return i}angular.module("angular-contextual-date").factory("contextualDateService",e),e.$inject=["$filter","$document"]}();
//# sourceMappingURL=data:application/json;base64,