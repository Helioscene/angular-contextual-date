{"version":3,"sources":["angular-contextual-date.js"],"names":["angular","module","contextualDateDirective","directive","scope","datetime","timezone","restrict","controller","ContextualDateController","controllerAs","template","bindToController","contextualDateService","activate","vm","cDateFormatted","format","this","$inject","contextualDateFilter","filter","value","$filter","$document","date","fullDateOverride","ldate","service","parseDate","isNaN","fullDate","relativeDate","now","Date","formatRelative","config","hideFullDate","formatFull","formatter","contextualDateFormat","result","replace","thresholds","isToday","getDate","getMonth","getFullYear","thisMonth","getTime","setDate","Math","round","month","isThisMonth","thisYear","year","isThisYear","$dateFilter","dateFormats","fullDateFormats","today","historical","pad","args","Array","prototype","join","call","arguments","trim","getLang","lang","slang","language","dlang","documentElement","languages","en_US","diff","milliseconds","seconds","minutes","hours","days","weeks","months","years","relative","th","week","day","hour","minute","second","millisecond","prefix","suffix","input","isNumber","test","parseInt","factory"],"mappings":"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","file":"angular-contextual-date.min.js","sourcesContent":["(function () {\r\n'use strict';\r\n\r\nangular.module('angular-contextual-date', []);\r\n\r\n})();\r\n\n(function () {\r\n'use strict';\r\n\r\nangular\r\n    .module('angular-contextual-date')\r\n    .directive('contextualDate', contextualDateDirective);\r\n\r\ncontextualDateDirective.$inject = [];\r\nfunction contextualDateDirective () {\r\n    var directive = {\r\n        scope : {\r\n            datetime: \"=\",\r\n            timezone: \"=\"\r\n        },\r\n        restrict: \"EA\",\r\n        controller: ContextualDateController,\r\n        controllerAs: \"CDC\",\r\n        template: \"<span ng-bind='CDC.cDateFormatted'></span>\",\r\n        bindToController: true\r\n    };\r\n\r\n    return directive;\r\n}\r\n\r\nContextualDateController.$inject = ['contextualDateService'];\r\nfunction ContextualDateController (contextualDateService) {\r\n    var vm = this;\r\n\r\n    // Directive variables\r\n    // vm.datetime\r\n    // vm.timezone\r\n\r\n    // Local variables\r\n    vm.cDateFormatted = \"\";\r\n\r\n    activate();\r\n\r\n    function activate () {\r\n        vm.cDateFormatted = contextualDateService.format(\r\n            vm.datetime,\r\n            null, /* overrideDate */\r\n            vm.timezone\r\n        );\r\n    }\r\n}\r\n\r\n})();\r\n\n(function () {\r\n'use strict';\r\n\r\nangular\r\n    .module('angular-contextual-date')\r\n    .filter('contextualDate', contextualDateFilter);\r\n\r\ncontextualDateFilter.$inject = ['contextualDateService'];\r\n\r\nfunction contextualDateFilter (contextualDateService) {\r\n    return filter;\r\n\r\n    function filter (value, timezone) {\r\n        return contextualDateService.format(value, null, timezone);\r\n    }\r\n}\r\n\r\n})();\r\n\n(function () {\r\n'use strict';\r\n\r\nangular\r\n    .module('angular-contextual-date')\r\n    .factory('contextualDateService', contextualDateService);\r\n\r\ncontextualDateService.$inject = [\"$filter\", \"$document\"];\r\n\r\nfunction contextualDateService ($filter, $document) {\r\n    var service = {\r\n        // functions\r\n        format: format,\r\n        formatRelative: formatRelative,\r\n        formatFull: formatFull,\r\n        parseDate: parseDate,\r\n\r\n        // configurations\r\n        config: {\r\n            hideFullDate : false,\r\n\r\n            fullDateFormats : {\r\n                today: \"h:mm a\",\r\n                thisMonth: \"MMM d 'at' h:mm a\",\r\n                thisYear: \"MMM d\",\r\n                historical: \"MMM d, y\"\r\n            },\r\n\r\n            contextualDateFormat: \"%fullDate% (%relativeDate%)\",\r\n\r\n            language: null, // this will hard set the language\r\n\r\n            thresholds: {\r\n                years: 1.75,\r\n                year: 0.75,\r\n                months: 1.75,\r\n                month: 0.9,\r\n                weeks: 1.75,\r\n                week: 1.0,\r\n                days: 2.0,\r\n                day: 1.0,\r\n                hours: 2.0,\r\n                hour: 1.0,\r\n                minutes: 2.0,\r\n                minute: 1.0,\r\n                seconds: 2.0,\r\n                second: 1.0,\r\n                milliseconds: 2.0,\r\n                millisecond: 1.0\r\n            }\r\n        },\r\n\r\n        // language support\r\n        languages : {\r\n            'en_US': {\r\n\r\n                now: \"just now\",\r\n\r\n                prefix: \"\",\r\n                suffix: \"ago\",\r\n                \r\n                millisecond: \"millisecond\",\r\n                milliseconds: \"milliseconds\",\r\n                second: \"second\",\r\n                seconds: \"seconds\",\r\n                minute: \"minute\",\r\n                minutes: \"minutes\",\r\n                hour: \"hour\",\r\n                hours: \"hours\",\r\n                day: \"day\",\r\n                days: \"days\",\r\n                week: \"week\",\r\n                weeks: \"weeks\",\r\n                month: \"month\",\r\n                months: \"months\",\r\n                year: \"year\",\r\n                years: \"years\"\r\n            }\r\n        }\r\n    };\r\n\r\n    return service;\r\n\r\n    function format (date, fullDateOverride, timezone) {\r\n        var ldate = service.parseDate(date);\r\n\r\n        // We weren't able to parse the date, just return as is\r\n        if (isNaN(ldate)) { return date; }\r\n\r\n        var now = new Date();\r\n        var fullDate, relativeDate;\r\n\r\n        relativeDate = service.formatRelative(ldate, now);\r\n\r\n        if (service.config.hideFullDate) {\r\n            return relativeDate;\r\n        }\r\n\r\n        if (fullDateOverride) {\r\n            fullDate = fullDateOverride;\r\n        } else {\r\n            fullDate = service.formatFull(ldate, now, timezone);\r\n        }\r\n\r\n        var formatter = service.config.contextualDateFormat;\r\n        var result = formatter\r\n                                        .replace('%fullDate%', fullDate)\r\n                                        .replace('%relativeDate%', relativeDate);\r\n\r\n        return result;\r\n    }\r\n\r\n    function formatFull(date, now, timezone) {\r\n        var ldate = service.parseDate(date);\r\n        if (isNaN(ldate)) { return date; }\r\n\r\n        now = now || new Date();\r\n\r\n        var fullDate = \"\";\r\n        var thresholds = service.config.thresholds;\r\n\r\n        var isToday = (ldate.getDate() === now.getDate() &&\r\n                                        ldate.getMonth() === now.getMonth() &&\r\n                                        ldate.getFullYear() === now.getFullYear());\r\n        \r\n        var thisMonth = new Date(now.getTime());\r\n        thisMonth.setDate(thisMonth.getDate() - Math.round(thresholds.month * 31));\r\n        var isThisMonth = (ldate.getTime() - thisMonth.getTime() >= 0);\r\n\r\n        var thisYear = new Date(now.getTime());\r\n        thisYear.setDate(thisYear.getDate() - Math.round(thresholds.year * 365));\r\n        var isThisYear = (ldate.getTime() - thisYear.getTime() >= 0);\r\n\r\n        var $dateFilter = $filter('date');\r\n        var dateFormats = service.config.fullDateFormats;\r\n\r\n        if (isToday) {\r\n            fullDate = $dateFilter(ldate, dateFormats.today, timezone);\r\n        }\r\n        else if (isThisMonth) {\r\n            fullDate = $dateFilter(ldate, dateFormats.thisMonth, timezone);\r\n        }\r\n        else if (isThisYear) {\r\n            fullDate = $dateFilter(ldate, dateFormats.thisYear, timezone);\r\n        }\r\n        else {\r\n            fullDate = $dateFilter(ldate, dateFormats.historical, timezone);\r\n        }\r\n\r\n        return fullDate;\r\n    }\r\n\r\n    function pad(args) {\r\n        return Array.prototype.join.call(arguments, \" \").trim();\r\n    }\r\n\r\n    function getLang() {\r\n        var slang = service.config.language;\r\n        var dlang = $document[0].documentElement.lang;\r\n        var lang;\r\n\r\n        if (slang) {\r\n            lang = service.languages[slang];\r\n        }\r\n        if (!lang && dlang) {\r\n            lang = service.languages[dlang];\r\n        }\r\n        if (!lang) {\r\n            lang = service.languages.en_US;\r\n        }\r\n\r\n        return lang;\r\n    }\r\n\r\n    function formatRelative(date, now) {\r\n        var ldate = service.parseDate(date);\r\n        if (isNaN(ldate)) { return date; }\r\n        now = now || new Date();\r\n\r\n        var lang = getLang();\r\n        var diff = now.getTime() - ldate.getTime();\r\n\r\n        var milliseconds = diff;\r\n        var seconds = milliseconds / 1000;\r\n        var minutes = seconds / 60;\r\n        var hours = minutes / 60;\r\n        var days = hours / 24;\r\n        var weeks = days / 7;\r\n        var months = days / 30;\r\n        var years = days / 365;\r\n\r\n        var relative = \"\";\r\n\r\n        var th = service.config.thresholds;\r\n\r\n        if (years >= th.years) {\r\n            relative = pad(Math.round(years), lang.years);\r\n        } else if (years >= th.year) {\r\n            relative = pad(1, lang.year);\r\n        } else if (months >= th.months) {\r\n            relative = pad(Math.round(months), lang.months);\r\n        } else if (months >= th.month) {\r\n            relative = pad(1, lang.month);\r\n        } else if (weeks >= th.weeks) {\r\n            relative = pad(Math.round(weeks), lang.weeks);\r\n        } else if (weeks >= th.week) {\r\n            relative = pad(1, lang.week);\r\n        } else if (days >= th.days) {\r\n            relative = pad(Math.round(days), lang.days);\r\n        } else if (days >= th.day) {\r\n            relative = pad(1, lang.day);\r\n        } else if (hours >= th.hours) {\r\n            relative = pad(Math.round(hours), lang.hours);\r\n        } else if (hours >= th.hour) {\r\n            relative = pad(1, lang.hour);\r\n        } else if (minutes >= th.minutes) {\r\n            relative = pad(Math.round(minutes), lang.minutes);\r\n        } else if (minutes >= th.minute) {\r\n            relative = pad(1, lang.minute);\r\n        } else if (seconds >= th.seconds) {\r\n            relative = pad(Math.round(seconds), lang.seconds);\r\n        } else if (seconds >= th.second) {\r\n            relative = pad(1, lang.second);\r\n        } else if (milliseconds >= th.milliseconds) {\r\n            relative = pad(Math.round(milliseconds), lang.milliseconds);\r\n        } else if (milliseconds >= th.millisecond) {\r\n            relative = pad(1, lang.millisecond);\r\n        }\r\n\r\n        if (!relative) {\r\n            relative = lang.now;\r\n        } else {\r\n            relative = pad(lang.prefix, relative, lang.suffix);\r\n        }\r\n\r\n        return relative;\r\n    }\r\n\r\n    function parseDate (input) {\r\n        if (input instanceof Date) {\r\n            return input;\r\n        // date.getTime();\r\n        } else if (angular.isNumber(input)) {\r\n            return new Date(input);\r\n        // date.getTime(); as string\r\n        } else if (/^\\d+$/.test(input)) {\r\n            return new Date(parseInt(input, 10));\r\n        // ISO / UTC\r\n        } else {\r\n            return new Date(input);\r\n        }\r\n    }\r\n}\r\n\r\n})();\r\n"],"sourceRoot":"/source/"}